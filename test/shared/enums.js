const eventsName = {
    AddedBlackList: 'AddedBlackList',
    RemovedBlackList: 'RemovedBlackList',
};

const revertMessages = {
    ownableCallerIsNotOwner: 'Ownable: caller is not the owner',
    serviceConstructorAddressIs0: 'Service::Constructor: address is 0',
    compensationConstructorAddressIs0: 'Compensation::Constructor: address is 0',
    compensationConstructorBlockTimestampIs0: 'Compensation::Constructor: timestamp is 0',
    compensationConstructorStartTimestampIsMoreThanCurrentTimestampAndMoreThanEndTimestamp: 'Compensation::Constructor: start timestamp must be more than current timestamp and less than end timestamp',
    compensationCompensationYouCanConvertPTokensBeforeStartTimestampOnly: 'Compensation::compensation: you can convert pTokens before start timestamp only',
    compensationCompensationSumBorrowMustBeLessThan1: 'Compensation::compensation: sumBorrow must be less than $1',
    compensationRemoveUnusedBadTimingForRequest: 'Compensation::removeUnused: bad timing for the request',
    compensationClaimTokenUserInBlackList: 'Compensation::claimToken: user in black list',
    compensationClaimTokenBadTimingForRequest: 'Compensation::claimToken: bad timing for the request',
    convertConstructorAddressIs0: 'Convert::Constructor: address is 0',
    convertConstructorNumIs0: 'Convert::Constructor: timestamp is 0',
    convertConstructorStartTimestampIsMoreThanCurrentTimestampAndMoreThanEndTimestamp: 'Convert::Constructor: start timestamp must be more than current timestamp and less than end timestamp',
    convertRemoveUnusedTokenBadTimingForRequest: 'Convert::removeUnusedToken: bad timing for the request',
    convertAddCheckpointCurrentTimestampValueMustBeLessThanFromBlockValue: 'Convert::addCheckpoint: current timestamp value must be less than from block value',
    convertAddCheckpointStartTimestampValueMustBeLessThanFromBlockValue: 'Convert::addCheckpoint: start timestamp value must be less than from block value',
    convertAddCheckpointToBlockValueMustBeLessThanEndTimestamp: 'Convert::addCheckpoint: to block value must be less than end timestamp',
    convertAddCheckpointBlockValueMustBeMoreThanPreviousLastBlockValue: 'Convert::addCheckpoint: block value must be more than previous last block value',
    convertAddCheckpointPercentValueMustBeMoreThan0: "Convert::addCheckpoint: percent value must be more than 0",
    convertAddCheckpointFromBlockValueMustBeLessThanToBlockValue: "Convert::addCheckpoint: to block value must be more than from block value",
    convertConvertIsNotOwner: 'Ownable: caller is not the owner',
    convertConvertYouCanConvertPTokensBeforeStartTimestampOnly: 'Convert::convert: you can convert pTokens before first checkpoint block timestamp only',
    convertConvertSumBorrowMustBeLessThan1: 'Convert::convert: sumBorrow must be less than $1',
    convertClaimTokenBadTimingForRequest: 'Convert::claimToken: bad timing for the request',
    convertClaimTokenUserInBlackList: 'Convert::claimToken: user in black list',
    refundConstructorBlockTimestampIs0: 'Refund::Constructor: timestamp is 0',
    refundConstructorStartTimestampMustBeMoreThanCurrentTimestampAndLessThanEndTimestamp: 'Refund::Constructor: start timestamp must be more than current timestamp and less than end timestamp',
    refundRemoveUnusedTokenBadTimingForRequest: 'Refund::removeUnused: bad timing for the request',
    refundRefundYouCanConvertPTokensBeforeStartTimestampOnly: 'Refund::refund: you can convert pTokens before start timestamp only',
    refundRefundSumBorrowMustBeLessThan1: 'Refund::refund: sumBorrow must be less than $1',
    refundClaimTokenBadTimingForRequest: 'Refund::claimToken: bad timing for the request',
    refundClaimTokenUserInBlackList: 'Refund::claimToken: user in black list',
    exchangeClaimBadTimingForRequest: 'Exchange::claim: bad timing for the request',
    exchangeDepositNativeBadTimingForRequest: 'Exchange::depositNative: bad timing for the request',
    exchangeDepositBadTimingForRequest: 'Exchange::deposit: bad timing for the request',
    exchangeDepositDepositInConvertIsNull: 'Exchange::deposit: deposit in convert is null',
    exchangeDepositNativeDepositInConvertIsNull: 'Exchange::depositNative: deposit in convert is null',
    exchangeDepositThisStableIsNotAllowed: 'Exchange::deposit: this stable coin is not allowed',
    exchangeConstructorAddressIs0: 'Exchange::Constructor: address is 0',
    exchangeConstructorTimestampIs0: 'Exchange::Constructor: timestamp timestamp is 0',
    exchangeConstructorStartTimeMustBeMoreCurrentAndLessEnd: 'Exchange::Constructor: start timestamp must be more than current timestamp and less than end timestamp',
    exchangeRemoveTokensBadTimingForRequest: 'Exchange::removeTokens: bad timing for the request',
    exchangeRemoveNativeBadTimingForRequest: 'Exchange::removeNative: bad timing for the request',
};

module.exports = {
    eventsName,
    revertMessages,
};
